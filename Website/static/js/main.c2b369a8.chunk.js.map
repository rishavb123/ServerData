{"version":3,"sources":["firebase.js","App.jsx","serviceWorker.js","index.js"],"names":["firebase_app__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","firebase_app__WEBPACK_IMPORTED_MODULE_0___default","n","_firebaseConfig_json__WEBPACK_IMPORTED_MODULE_3__","firebase","initializeApp","config","playerX","shiftX","document","documentElement","clientWidth","playerY","shiftY","clientHeight","intersectRect","r1","r2","left","right","top","bottom","Player","x","y","angle","Object","C_Projects_UniversalProjects_ServerData_src_server_data_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","this","radius","shiftAngle","v","attacking","attackCounter","controller","forward","back","drawX","drawY","mouse","Math","atan","PI","direction","_this","atAngle","cos","sin","updateAngle","ctx","move","fillStyle","beginPath","arc","fill","stroke","closePath","attackDistance","abs","Server","data","theme","hostname","area","version","uptime","width","height","health","concat","fillRect","rect","font","fillText","Canvas","_this2","C_Projects_UniversalProjects_ServerData_src_server_data_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Projects_UniversalProjects_ServerData_src_server_data_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","updateCanvas","bind","C_Projects_UniversalProjects_ServerData_src_server_data_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","refs","canvas","getContext","canvasRect","getBoundingClientRect","player","servers","numOfAddedServers","props","sort","a","b","currentArea","length","areaShift","healing","bgColorIndex","colors","dark","light","i","xWithoutShift","floor","obj","_this3","clearRect","minServer","minDistance","Number","MAX_SAFE_INTEGER","window","innerWidth","innerHeight","_arr","values","_i","server","getPunchingHand","getRect","destroyedServer","draw","sqrt","pow","makeRandColor","num","random","updateBgColor","requestAnimationFrame","style","backgroundColor","_this4","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","ref","onMouseMove","e","clientX","clientY","id","transition","Component","App","_this5","checkOrientation","createGraphData","isNaN","parseInt","state","columnDefs","headerName","field","checkboxSelection","editable","rows","orientation","graph_revision","authenticated","curUser","accessCode","fieldEditerIsOpen","fieldRemoverIsOpen","dataEditorIsOpen","dataRemoverIsOpen","selectorIsOpen","shareCodeIsOpen","joinCodeIsOpen","bestViewerIsOpen","dataFileEditorIsOpen","error","selectorTab","cachedExpression","dataIndex","beautify","pieChart","layout","title","plot_bgcolor","paper_bgcolor","family","color","addEventListener","activeElement","tagName","keyCode","canvasComponent","attack","removeEventListener","setState","xs","ys","ys2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","includes","indexOf","push","err","return","j","tempX","splice","tempY","tempY2","type","labels","name","marker","s","dataCopy","C_Projects_UniversalProjects_ServerData_src_server_data_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","getIndexByHostname","deleteServer","_this6","navigator","userAgent","match","className","ag_grid_react__WEBPACK_IMPORTED_MODULE_10__","enableSorting","enableFilter","rowSelection","rowDragManaged","rowData","onGridReady","params","gridApi","api","columnApi","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_9__","expand","cursor","fontSize","userSelect","navbar","nav","inNavbar","caret","onClick","selectedData","getSelectedRows","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","d","borderRight","deselectAll","disabled","database","once","snapshot","val","recreateServers","uid","snap","set","fileSelector","setAttribute","onchange","event","fileReader","FileReader","onload","JSON","parse","target","result","message","readAsText","files","body","appendChild","click","removeChild","fileContents","csv","replace","csvData","jsonData","keys","toLowerCase","readAsBinaryString","blob","Blob","stringify","url","URL","createObjectURL","display","exportDataAsCsv","fileName","plot","el","getElementsByClassName","getElementById","toDataURL","refreshCells","marginRight","overflow","textAlign","margin","padding","provider","auth","GoogleAuthProvider","signInWithPopup","then","user","on","r","toString","substring","catch","src","photoURL","alt","borderRadius","displayName","email","signOut","react_toggle_component__WEBPACK_IMPORTED_MODULE_14___default","checked","onToggle","layoutCopy","C_Projects_UniversalProjects_ServerData_src_server_data_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","position","animateRows","enableCellChangeFlash","getRowNodeId","onRowSelected","shouldRun","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","onCellEditingStopped","updateData","react_plotly_js__WEBPACK_IMPORTED_MODULE_16___default","revision","responsive","scrollZoom","displaylogo","size","isOpen","onSubmit","preventDefault","addServer","defaultValue","arr","count","_i5","saveData","axios","get","res","prediction","hostnames","split","key","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","join","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","forEachNode","node","setSelected","expression","replacedExpression","eval","tabs","activeTab","tabId","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","fontWeight","fontStyle","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","code","newData","label","labelRight","float","best","scope","Boolean","location","ReactDOM","render","react_default","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2b369a8.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth'\r\nimport 'firebase/database'\r\nimport config from './firebaseConfig.json'\r\nfirebase.initializeApp(config);\r\nexport default firebase","import React, { Component } from 'react';\r\n\r\nimport { Table, TabContent, TabPane, Navbar, NavbarBrand, Nav, NavItem, NavLink, DropdownToggle, UncontrolledDropdown, DropdownMenu, DropdownItem, Modal, ModalBody, ModalHeader, ModalFooter, Form, FormGroup, FormText, Button, Label, Input } from 'reactstrap';\r\n\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-dark.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nimport Toggle from \"react-toggle-component\"\r\nimport \"react-toggle-component/styles.css\"\r\n\r\nimport Plot from 'react-plotly.js';\r\n\r\nimport csv from 'csv';\r\n\r\nimport axios from 'axios';\r\n\r\nimport data from './data/data.json'\r\n\r\nimport firebase from './firebase.js'\r\n\r\nlet playerX = 0;\r\nfunction shiftX() {\r\n    return 0.2*document.documentElement.clientWidth - playerX;\r\n}\r\n\r\nlet playerY = 0;\r\nfunction shiftY() {\r\n    return .25*document.documentElement.clientHeight - playerY;\r\n}\r\n\r\nfunction intersectRect(r1, r2) {\r\n    return !(r2.left > r1.right || \r\n             r2.right < r1.left || \r\n             r2.top > r1.bottom ||\r\n             r2.bottom < r1.top);\r\n}\r\n\r\nclass Player {\r\n    \r\n    constructor(x, y, angle) {\r\n        this.x = x;\r\n        this.y = y;\r\n        playerX = this.x;\r\n        playerY = this.y;\r\n        this.angle = angle;\r\n        this.radius = 20;\r\n        this.shiftAngle = 40;\r\n        this.v = 6;\r\n        this.attacking = 0;\r\n        this.attackCounter = 0;\r\n        this.controller = {\r\n            left: false,\r\n            right: false,\r\n            forward: false,\r\n            back: false\r\n        }\r\n        this.drawX = 0.2*document.documentElement.clientWidth;\r\n        this.drawY = 0.25*document.documentElement.clientHeight;\r\n    }\r\n\r\n    updateAngle(mouse) {\r\n        this.mouse = mouse;\r\n        if(!mouse)\r\n            this.angle = 0;\r\n        else if(mouse.x === this.drawX)\r\n            this.angle = 0;\r\n        else\r\n            this.angle = (mouse.x - this.drawX > 0)? Math.atan((mouse.y - this.drawY)/(mouse.x - this.drawX))*180.0/Math.PI: Math.atan((mouse.y - this.drawY)/(mouse.x - this.drawX))*180.0/Math.PI + 180;\r\n    }\r\n\r\n    move(direction) {\r\n        let atAngle = (angle) => {\r\n            this.x += this.v*Math.cos(angle*Math.PI/180.0);\r\n            this.y += this.v*Math.sin(angle*Math.PI/180.0);\r\n        };\r\n        switch(direction)\r\n        {\r\n            case \"forward\":\r\n                atAngle(this.angle);\r\n                break;\r\n            case \"back\":\r\n                atAngle(this.angle+180);\r\n                break;\r\n            case \"left\":\r\n                atAngle(this.angle-90);\r\n                break;\r\n            case \"right\":\r\n                atAngle(this.angle+90);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        playerX = this.x;\r\n        playerY = this.y;\r\n        this.updateAngle(this.mouse);\r\n    }\r\n\r\n    attack() {\r\n        this.attacking = 14;\r\n        this.attackCounter++;\r\n    }\r\n\r\n    draw(ctx) {\r\n        \r\n        if(this.controller.left)\r\n            this.move(\"left\");\r\n        if(this.controller.right)\r\n            this.move(\"right\");\r\n        if(this.controller.forward)\r\n            this.move(\"forward\");\r\n        if(this.controller.back)\r\n            this.move(\"back\");        \r\n\r\n        ctx.fillStyle = \"#ffd9b3\";\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.drawX, this.drawY, this.radius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        let attackDistance = 7 - Math.abs(this.attacking-7);\r\n\r\n        if(this.attacking && this.attackCounter%2===0)\r\n            this.radius*=1+(attackDistance/20);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.drawX+this.radius*Math.cos((this.angle+this.shiftAngle)*Math.PI/180.0), this.drawY+this.radius*Math.sin((this.angle+this.shiftAngle)*Math.PI/180.0), this.radius/3.5, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        if(this.attacking && this.attackCounter%2===1)\r\n            this.radius*=1+(attackDistance/20);\r\n        if(this.attacking && this.attackCounter%2===0)\r\n            this.radius/=1+(attackDistance/20);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.drawX+this.radius*Math.cos((this.angle-this.shiftAngle)*Math.PI/180.0), this.drawY+this.radius*Math.sin((this.angle-this.shiftAngle)*Math.PI/180.0), this.radius/3.5, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        if(this.attacking && this.attackCounter%2===1)\r\n            this.radius/=1+(attackDistance/20);\r\n\r\n        if(this.attacking)\r\n            this.attacking-=2;\r\n    }\r\n\r\n    getPunchingHand() {\r\n        let attackDistance = 7 - Math.abs(this.attacking-7);\r\n        if(!this.attacking)\r\n            return null;\r\n        if(this.attackCounter%2 === 0)\r\n            return {\r\n                left: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle+this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                right: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle+this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius,\r\n                top: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle+this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                bottom: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle+this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius\r\n            };\r\n        else\r\n            return {\r\n                left: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle-this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                right: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle-this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius,\r\n                top: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle-this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                bottom: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle-this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius\r\n            }\r\n    }\r\n\r\n}\r\n\r\nclass Server {\r\n\r\n    constructor(data, x, y, theme) {\r\n        if(data && data.hostname)\r\n            this.hostname = data.hostname;\r\n        if(data && data.area)\r\n            this.area = data.area;\r\n        if(data && data.version)\r\n            this.version = data.version;\r\n        if(data && data.uptime)\r\n            this.uptime = data.uptime;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 50;\r\n        this.height = 50;\r\n        this.health = 100;\r\n        this.theme = theme;\r\n    }\r\n\r\n    getRect() {\r\n        return {\r\n            left: this.x,\r\n            top: this.y,\r\n            right: this.x+this.width,\r\n            bottom: this.y+this.height\r\n        };\r\n    }\r\n\r\n    draw(ctx) {\r\n        if(this.health > 0)\r\n        {\r\n            ctx.fillStyle = `rgb(${((this.theme === \"light\")? 255: 200) - this.health},${(this.theme === \"light\")? 155: 100},${(this.theme === \"light\")? 155: 100})`;\r\n            ctx.fillRect(this.x+shiftX(), this.y+shiftY(), this.width, this.height);\r\n            ctx.rect(this.x+shiftX(), this.y+shiftY(), this.width, this.height);\r\n            ctx.fillStyle=\"black\";\r\n            ctx.font = \"7px Arial\";\r\n            ctx.fillText(this.hostname, this.x+shiftX()+1,this.y+shiftY()+10);\r\n            ctx.fillText(this.area, this.x+shiftX()+1,this.y+shiftY()+21);\r\n            ctx.fillText(this.version, this.x+shiftX()+1,this.y+shiftY()+31);\r\n            ctx.fillText(this.uptime, this.x+shiftX()+1,this.y+shiftY()+41);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Canvas extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.updateCanvas = this.updateCanvas.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ctx = this.refs.canvas.getContext('2d');\r\n        this.canvasRect = this.refs.canvas.getBoundingClientRect();\r\n        this.player = new Player(150, 150, 0);\r\n        this.servers = {};\r\n        this.numOfAddedServers = 0;\r\n        let data = (this.props.data)? this.props.data.sort((a,b) => (a.area > b.area) ? 1 : ((b.area > a.area) ? -1 : 0)): []; \r\n        let currentArea = (data && data.length > 0)? data[0].area: \"area\";\r\n        this.currentArea = currentArea;\r\n        let areaShift = 0;\r\n        this.healing = false;\r\n        this.bgColorIndex = 0;\r\n\r\n        this.colors = {\r\n            dark: ['#b30000', '#262673', '#000000', '#267326', '#666600', '#800080', '#33334d' ,'#004d4d'],\r\n            light: ['#ffcccc', '#8c8cd9', '#ffffff', '#b3e6b3', '#ffff33', '#ff4dff', '#c2c2d6', '#99ffff']\r\n        }\r\n\r\n        /*eslint-disable */\r\n        for(let i=0; i<data.length; i++) {\r\n            const xWithoutShift = 10+60*Math.floor(i/4);\r\n            if(data[i].area != currentArea)\r\n            {\r\n                areaShift+=100;\r\n                currentArea = data[i].area;\r\n                i--;\r\n                continue;\r\n            }\r\n            this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 10, this.props.theme);\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 70, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 130, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 190, this.props.theme);\r\n            }\r\n        }\r\n        /*eslint-enable */\r\n        this.mouse = {\r\n            x: this.x+1,\r\n            y: this.y\r\n        };\r\n        this.updateCanvas();\r\n    }\r\n\r\n    recreateServers() {\r\n        this.servers = {};\r\n        if(!this.props.data)\r\n            return;\r\n        this.numOfAddedServers = 0;\r\n        let data = this.props.data.sort((a,b) => (a.area > b.area) ? 1 : ((b.area > a.area) ? -1 : 0)); \r\n        let currentArea = (data && data.length > 0)? data[0].area: \"area\";\r\n        let areaShift = 0;\r\n        /*eslint-disable */\r\n        for(let i=0; i<data.length; i++) {\r\n            const xWithoutShift = 10+60*Math.floor(i/4);\r\n            if(data[i].area != currentArea)\r\n            {\r\n                areaShift+=100;\r\n                currentArea = data[i].area;\r\n                i--;\r\n                continue;\r\n            }\r\n            this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 10, this.props.theme);\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 70, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 130, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 190, this.props.theme);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateData(obj) \r\n    {\r\n        if(this.servers[obj.hostname])\r\n        {\r\n            this.servers[obj.hostname].area = obj.area;\r\n            this.servers[obj.hostname].version = obj.version;\r\n            this.servers[obj.hostname].uptime = obj.uptime;\r\n        }\r\n    }\r\n\r\n    deleteServer(hostname)\r\n    {\r\n        if(this.servers[hostname])\r\n            delete this.servers[hostname];\r\n    }\r\n\r\n    addServer(obj)\r\n    {\r\n        this.servers[obj.hostname] = new Server(obj, 10+60*this.numOfAddedServers, 250, this.props.theme);\r\n        this.numOfAddedServers++;\r\n    }\r\n\r\n    updateCanvas() {\r\n        this.ctx.clearRect(0, 0, this.canvasRect.width, this.canvasRect.height);\r\n        let minServer = -1;\r\n        let minDistance = Number.MAX_SAFE_INTEGER;\r\n        const window = {\r\n            left: this.player.x - this.refs.canvas.innerWidth/2.0,\r\n            right: this.player.x + this.refs.canvas.innerWidth/2.0,\r\n            top: this.player.y - this.refs.canvas.innerHeight/2.0,\r\n            bottom: this.player.y + this.refs.canvas.innerHeight/2.0,\r\n        }\r\n        for(let server of Object.values(this.servers))\r\n        {\r\n            if(server.theme !== this.props.theme)\r\n                server.theme = this.props.theme;\r\n            if(this.player.attacking)\r\n            {\r\n                if(intersectRect(this.player.getPunchingHand(), server.getRect()))\r\n                    server.health-=2;\r\n            }\r\n            if(server.health < 0)\r\n            {\r\n                this.props.destroyedServer(server);\r\n            }\r\n            if(intersectRect(window, server.getRect()))\r\n                server.draw(this.ctx);\r\n            if(Math.sqrt(Math.pow(server.x + server.width/2 - this.player.x, 2) + Math.pow(server.y + server.height/2 - this.player.y, 2)) < minDistance)\r\n            {\r\n                minServer = server;\r\n                minDistance = Math.sqrt(Math.pow(server.x + server.width/2 - this.player.x, 2) + Math.pow(server.y + server.height/2 - this.player.y, 2));\r\n            }\r\n        }\r\n        if(this.healing && minServer.health < 96)\r\n            minServer.health+=5;\r\n        if(this.healing && minServer.health < 100 && minServer.health > 95)\r\n            minServer.health++;\r\n\r\n        if(!this.healing && minServer.health < 50)\r\n        {\r\n            this.ctx.fillStyle=(this.props.theme === \"light\")? \"black\" : \"white\";\r\n            this.ctx.font = \"20px Arial\";\r\n            this.ctx.fillText(\"FIX NEAREST SERVER WITH F\", 10, 30);\r\n        }\r\n\r\n         // eslint-disable-next-line\r\n        if(minServer.area != this.currentArea)\r\n        {\r\n            this.currentArea = minServer.area;\r\n            let makeRandColor = () => {\r\n                let num = Math.floor(Math.random()*8);\r\n                if(num === this.bgColorIndex)\r\n                    return makeRandColor();\r\n                else {\r\n                    this.bgColorIndex = num;\r\n                    this.updateBgColor();\r\n                }\r\n            }\r\n            makeRandColor();\r\n        }\r\n\r\n        this.player.draw(this.ctx);\r\n        requestAnimationFrame(this.updateCanvas);\r\n    }\r\n\r\n    updateBgColor() {\r\n        this.refs.canvas.style.backgroundColor = this.colors[this.props.theme][this.bgColorIndex];\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <canvas \r\n                ref=\"canvas\"\r\n                onMouseMove={\r\n                    e => {\r\n                        this.mouse = {\r\n                            x: e.clientX - this.canvasRect.x,\r\n                            y: e.clientY - this.canvasRect.y\r\n                        }\r\n                        this.player.updateAngle(this.mouse);\r\n                    }\r\n                }\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                id=\"canvas\"\r\n                style={{  \r\n                    backgroundColor: this.props.backgroundColor,\r\n                    transition: \"background-color 2s\"\r\n                }}/>\r\n        );\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.checkOrientation = this.checkOrientation.bind(this);\r\n        this.createGraphData = this.createGraphData.bind(this);\r\n        this.destroyedServer = this.destroyedServer.bind(this);\r\n\r\n        for(let i in data)\r\n        {\r\n            data[i].uptime = (data[i].uptime && !isNaN(parseInt(data[i].uptime)))? parseInt(data[i].uptime) : 0;\r\n        }\r\n\r\n        this.state = {\r\n            columnDefs: [\r\n                {headerName: \"Hostname\", field: \"hostname\", checkboxSelection: true},\r\n                {headerName: \"Area\", field: \"area\", editable: true},\r\n                {headerName: \"Version\", field: \"version\", editable: true},\r\n                {headerName: \"Uptime\", field: \"uptime\", editable: true}\r\n            ],\r\n            data: data,\r\n            rows: null,\r\n            orientation: \"h\",\r\n            graph_revision: 0,\r\n            authenticated: 0,\r\n            curUser: null,\r\n            accessCode: \"\",\r\n            fieldEditerIsOpen: false,\r\n            fieldRemoverIsOpen: false,\r\n            dataEditorIsOpen: false,\r\n            dataRemoverIsOpen: false,\r\n            selectorIsOpen: false,\r\n            shareCodeIsOpen: false,\r\n            joinCodeIsOpen: false,\r\n            bestViewerIsOpen: false,\r\n            dataFileEditorIsOpen: false,\r\n            error: \"\",\r\n            selectorTab: \"hostname\",\r\n            cachedExpression: \"\",\r\n            dataIndex: -1,\r\n            theme: \"dark\",\r\n            beautify: false,\r\n            pieChart: false,\r\n            layout: {title: 'Details Depending on Area', plot_bgcolor: '#222222', paper_bgcolor: '#222222', font: { family: 'Courier New, monospace', color: \"#ffffff\"} }\r\n        };\r\n\r\n        /*eslint-disable */\r\n        window.addEventListener(\"keydown\", e => {\r\n            if(document.activeElement.tagName === \"BODY\")\r\n            {\r\n                switch(e.keyCode)\r\n                {\r\n                    case 37:\r\n                    case 65:\r\n                        this.refs.canvasComponent.player.controller.left = true;\r\n                        break;\r\n                    case 38:\r\n                    case 87:\r\n                        this.refs.canvasComponent.player.controller.forward = true;\r\n                        break;\r\n                    case 39:\r\n                    case 68:\r\n                        this.refs.canvasComponent.player.controller.right = true;\r\n                        break;\r\n                    case 40:\r\n                    case 83:\r\n                        this.refs.canvasComponent.player.controller.back = true;\r\n                        break;\r\n                    case 70:\r\n                        this.refs.canvasComponent.healing = true;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        window.addEventListener(\"keyup\", e => {\r\n            if(document.activeElement.tagName === \"BODY\")\r\n            {\r\n                switch(e.keyCode)\r\n                {\r\n                    case 37:\r\n                    case 65:\r\n                        this.refs.canvasComponent.player.controller.left = false;\r\n                        break;\r\n                    case 38:\r\n                    case 87:\r\n                        this.refs.canvasComponent.player.controller.forward = false;\r\n                        break;\r\n                    case 39:\r\n                    case 68:\r\n                        this.refs.canvasComponent.player.controller.right = false;\r\n                        break;\r\n                    case 40:\r\n                    case 83:\r\n                        this.refs.canvasComponent.player.controller.back = false;\r\n                        break;\r\n                    case 32:\r\n                        this.refs.canvasComponent.player.controller.left = false;\r\n                        this.refs.canvasComponent.player.controller.right = false;\r\n                        this.refs.canvasComponent.player.controller.forward = false;\r\n                        this.refs.canvasComponent.player.controller.back = false;\r\n                        this.refs.canvasComponent.healing = false;\r\n                        break;\r\n                    case 70:\r\n                        this.refs.canvasComponent.healing = false;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        /*eslint-enable */\r\n        window.addEventListener(\"click\", e => {\r\n            if(document.activeElement.tagName === \"BODY\")\r\n                this.refs.canvasComponent.player.attack();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.checkOrientation();\r\n        window.addEventListener(\"resize\", this.checkOrientation);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.checkOrientation);\r\n    }\r\n\r\n    checkOrientation() {\r\n        if(window.innerHeight > window.innerWidth)\r\n            this.setState({orientation: \"v\"});\r\n        else\r\n            this.setState({orientation: \"h\"});\r\n    }\r\n\r\n    getIndexByHostname(hostname) {\r\n        if(!this.state.data) return -1;\r\n        for(let i = 0; i < this.state.data.length; i++)\r\n            if(hostname === this.state.data[i].hostname)\r\n                return i;\r\n        return -1;\r\n    }\r\n\r\n    createGraphData(data) {\r\n        if(!data) return null;\r\n        let xs = [];\r\n        let ys = [];\r\n        let ys2 = [];\r\n        for(let server of data)\r\n        {\r\n            if(server.area)\r\n                if(!xs.includes(server.area))\r\n                {\r\n                    xs.push(server.area);\r\n                    ys[xs.indexOf(server.area)] = 1;\r\n                    ys2[xs.indexOf(server.area)] = (isNaN(parseInt(server.uptime)))? 0 : parseInt(server.uptime);\r\n                }\r\n                else\r\n                {\r\n                    ys2[xs.indexOf(server.area)] += (isNaN(parseInt(server.uptime)))? 0 : parseInt(server.uptime);\r\n                    ys[xs.indexOf(server.area)]++;\r\n                }\r\n        }\r\n        for(let i = 0; i < ys.length; i++)\r\n        {\r\n            ys2[i] /= ys[i];\r\n        }\r\n        for(let i = 1; i < ys.length; i++)\r\n            for(let j = 0; j < i; j++) {\r\n                if(ys[i] > ys[j]) {\r\n                    let tempX = xs.splice(i, 1)[0];\r\n                    let tempY = ys.splice(i, 1)[0];\r\n                    let tempY2 = ys2.splice(i, 1)[0];\r\n                    xs.splice(j,0,tempX);\r\n                    ys.splice(j,0,tempY);\r\n                    ys2.splice(j,0,tempY2);\r\n                }\r\n            }\r\n        \r\n        if(this.state.pieChart)\r\n            return [{type: \"pie\", labels: xs, values: ys}];\r\n\r\n        return [{type: \"bar\", x: xs, y: ys2, name: \"Average Uptime\", marker:{color:\"blue\"}},\r\n                {type: \"bar\", x: xs, y: ys, name: \"Count\", marker:{color:\"red\"}}];\r\n\r\n    }\r\n\r\n    destroyedServer(s) {\r\n        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n        let hostname = s.hostname;\r\n        if(this.getIndexByHostname(hostname) >= 0)\r\n        {\r\n            dataCopy.splice(this.getIndexByHostname(hostname), 1);\r\n            this.refs.canvasComponent.deleteServer(hostname);\r\n        }\r\n        this.setState({ data: dataCopy, graph_revision: this.state.graph_revision + 1 });\r\n    }\r\n\r\n    render() {\r\n        return (this.state.orientation === \"h\" && !navigator.userAgent.match(/iphone|android|blackberry/ig))? (\r\n            <>\r\n                <Navbar color={this.state.theme} light={this.state.theme === \"light\"} dark={this.state.theme === \"dark\"} expand>\r\n                    <NavbarBrand style={{ cursor: \"default\", fontSize: \"30px\", userSelect: \"none\", color: \"red\" }}>Server Data</NavbarBrand>\r\n                    <Nav className=\"ml-auto\" navbar\r\n                        style={{\r\n                            fontSize: \"15px\",\r\n                            userSelect: \"none\"\r\n                        }}\r\n                        >\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Field</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ fieldEditerIsOpen: true });\r\n                                }}>\r\n                                    Edit\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ fieldRemoverIsOpen: true });\r\n                                }}>\r\n                                    Remove\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ bestViewerIsOpen: true });\r\n                                }}>\r\n                                    Performance\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Data</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ dataEditorIsOpen: true, dataIndex: -1 });\r\n                                }}>\r\n                                    New Server\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ dataRemoverIsOpen: true });\r\n                                }}>\r\n                                    Remove Server\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ dataEditorIsOpen: true });\r\n                                }}>\r\n                                    Edit Selected\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n\r\n                                    for(let d of selectedData)\r\n                                    {\r\n                                        this.refs.canvasComponent.deleteServer(d.hostname);\r\n                                        dataCopy.splice(dataCopy.indexOf(d), 1);\r\n                                    }\r\n\r\n                                    this.setState({ data: dataCopy });\r\n                                }}>\r\n                                    Remove Selected\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ dataFileEditorIsOpen: true });\r\n                                }}>\r\n                                    Edit File\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Graph</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ pieChart: false, graph_revision: this.state.graph_revision + 1 });\r\n                                }}>\r\n                                    Bar Graph\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ pieChart: true, graph_revision: this.state.graph_revision + 1 });\r\n                                }}>\r\n                                    Pie Chart\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar style={{ borderRight: \"1px solid red\" }}>\r\n                            <DropdownToggle nav caret>Select</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                        this.setState({ selectorIsOpen: true });\r\n                                    }}>\r\n                                    Open Selector\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.gridApi.deselectAll();\r\n                                }}>\r\n                                    Deselect All\r\n                                </DropdownItem>\r\n                                <DropdownItem disabled>\r\n                                    {\r\n                                        (() => {\r\n                                            if(this.gridApi)\r\n                                                return this.gridApi.getSelectedRows().length+\" Rows Selected\";\r\n                                            return \"0 Rows Selected\"\r\n                                        })()\r\n                                    }\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" onClick={() => {\r\n                                if(this.state.authenticated === 1)\r\n                                {\r\n                                    firebase.database().ref('/'+this.state.accessCode).once(\"value\", snapshot => {\r\n                                        this.setState({ data: snapshot.val(), graph_revision: this.state.graph_revision + 1 });\r\n                                        this.refs.canvasComponent.recreateServers();\r\n                                    });\r\n                                }\r\n                                else\r\n                                    this.setState({ error: \"Sign In To Pull Data\" });\r\n                                \r\n                            }}>Pull</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" onClick={() => {\r\n                                if(this.state.authenticated === 1)\r\n                                {\r\n                                    firebase.database().ref(\"/\"+this.state.curUser.uid).once(\"value\", snap => {\r\n                                        firebase.database().ref('/'+snap.val()).set(this.state.data);\r\n                                    });\r\n                                }\r\n                                else\r\n                                this.setState({ error: \"Sign In Push Data\" });\r\n                            \r\n\r\n                                }}>Push</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar style={{ borderRight: \"1px solid red\" }}>\r\n                            <DropdownToggle nav caret>Share</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                        this.setState({ shareCodeIsOpen: true });\r\n                                    }}>\r\n                                    Share\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ joinCodeIsOpen: true });\r\n                                }}>\r\n                                    Join \r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Import</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    let fileSelector = document.createElement(\"input\");\r\n                                    fileSelector.setAttribute(\"type\", \"file\");\r\n                                    fileSelector.setAttribute(\"accept\", \".json\");\r\n                                    fileSelector.onchange = event => {\r\n                                        let fileReader = new FileReader();\r\n                                        fileReader.onload = e => {\r\n                                            try {\r\n                                                let data = JSON.parse(e.target.result);\r\n                                                for(let i in data)\r\n                                                {\r\n                                                    data[i].uptime = (data[i].uptime && !isNaN(parseInt(data[i].uptime)))? parseInt(data[i].uptime) : 0;\r\n                                                }\r\n                                                this.setState({ data: data, graph_revision: this.state.graph_revision + 1 }, () => this.refs.canvasComponent.recreateServers());\r\n                                            } catch(e) {\r\n                                                this.setState({ error: \"Error in JSON file: \"+e.message });\r\n                                            }\r\n                                        }\r\n                                        fileReader.readAsText(fileSelector.files[0]);\r\n                                    };\r\n                                    document.body.appendChild(fileSelector);\r\n                                    fileSelector.click();\r\n                                    document.body.removeChild(fileSelector);\r\n                                }}>\r\n                                    JSON\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    let fileSelector = document.createElement(\"input\");\r\n                                    fileSelector.setAttribute(\"type\", \"file\");\r\n                                    fileSelector.setAttribute(\"accept\", \".csv\");\r\n                                    fileSelector.onchange = event => {\r\n                                        let fileReader = new FileReader();\r\n                                        fileReader.onload = e => {\r\n                                            let fileContents = e.target.result;\r\n                                            csv.parse(fileContents.replace(/\"/g, \"\"), (err, csvData) => {\r\n                                                if(csvData.length < 1)\r\n                                                    err = \"Csv file not properly formatted\";\r\n                                                if(err)\r\n                                                {\r\n                                                    this.setState({ error: \"Error in CSV file: \"+err });\r\n                                                    return;\r\n                                                }\r\n                                                let jsonData = [];\r\n                                                let keys = [];\r\n                                                for(let i = 0; i < csvData[0].length; i++)\r\n                                                {\r\n                                                    keys.push(csvData[0][i].replace(/[^0-9a-z]/gi, '').toLowerCase());\r\n                                                }\r\n                                                for(let i = 1; i < csvData.length; i++)\r\n                                                {\r\n                                                    let obj = {};\r\n                                                    for(let j = 0; j < keys.length; j++)\r\n                                                    {\r\n                                                        obj[keys[j]] = csvData[i][j]; \r\n                                                    }\r\n                                                    jsonData.push(obj);\r\n                                                }\r\n                                                for(let i in jsonData)\r\n                                                {\r\n                                                    jsonData[i].uptime = (jsonData[i].uptime && !isNaN(parseInt(jsonData[i].uptime)))? parseInt(jsonData[i].uptime) : 0;\r\n                                                }\r\n                                                this.setState({ data: jsonData, graph_revision: this.state.graph_revision + 1 }, () => this.refs.canvasComponent.recreateServers());\r\n                                            });\r\n                                            \r\n                                        }\r\n                                        fileReader.readAsBinaryString(fileSelector.files[0]);\r\n                                    };\r\n                                    document.body.appendChild(fileSelector);\r\n                                    fileSelector.click();\r\n                                    document.body.removeChild(fileSelector);\r\n                                }}>\r\n                                    CSV\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar style={{ borderRight: \"1px solid red\" }}>\r\n                            <DropdownToggle nav caret>Export</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    let e = document.createElement('a');\r\n                                    let blob = new Blob([JSON.stringify(this.state.data, null, (this.state.beautify)? 4: 0)], {type: \"text/json;charset=utf-8\"});\r\n                                    let url = URL.createObjectURL(blob);\r\n                                    e.setAttribute('href', url);\r\n                                    e.setAttribute(\"download\", \"ServerData.json\");\r\n                                    e.style.display = 'none';\r\n                                    document.body.appendChild(e);\r\n                                    e.click();\r\n                                    document.body.removeChild(e);\r\n                                }}>\r\n                                    JSON\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.gridApi.exportDataAsCsv({fileName: \"ServerData.csv\"});\r\n                                }}>\r\n                                    CSV\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.refs.plot.el.getElementsByClassName('modebar')[0].getElementsByClassName('modebar-btn')[0].click();\r\n                                }}>\r\n                                    Graph\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    let e = document.createElement('a');\r\n                                    let url = document.getElementById('canvas').toDataURL('image/png');\r\n                                    e.setAttribute('href', url);\r\n                                    e.setAttribute(\"download\", \"canvas.png\");\r\n                                    e.style.display = 'none';\r\n                                    document.body.appendChild(e);\r\n                                    e.click();\r\n                                    document.body.removeChild(e);\r\n                                }}>\r\n                                    Canvas\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" style={{ borderRight: \"1px solid red\" }} onClick={() => {\r\n                                this.gridApi.refreshCells();\r\n                                this.refs.canvasComponent.recreateServers();\r\n                                this.setState({ graph_revision: this.state.graph_revision + 1 });\r\n                            }}>Refresh</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar style={{\r\n                            marginRight: 30,\r\n                            width: 75\r\n                        }}>\r\n                            <DropdownToggle nav caret>User</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"15px\", overflow: \"hidden\", width: 160, textAlign: \"center\", margin: 0, padding: 0}}>\r\n                                {\r\n                                    (() => {\r\n                                        if(this.state.authenticated === 0)\r\n                                            return (\r\n                                                <DropdownItem onClick={() => {\r\n                                                        const provider = new firebase.auth.GoogleAuthProvider();\r\n                                                        firebase.auth().signInWithPopup(provider).then(result => {\r\n                                                            this.setState({ curUser: result.user, authenticated: 1 });\r\n                                                            firebase.database().ref(\"/\"+this.state.curUser.uid).once(\"value\", snap => {\r\n                                                                if(!snap.val())\r\n                                                                {\r\n                                                                    let r = Math.random().toString(36).substring(2);\r\n                                                                    firebase.database().ref(\"/\"+this.state.curUser.uid).set(r);\r\n                                                                    firebase.database().ref(\"/\"+r).set(this.state.data);\r\n                                                                    this.setState({ accessCode: r });\r\n                                                                    firebase.database().ref(\"/\"+this.state.curUser.uid).on(\"value\", snap => {\r\n                                                                        this.setState({ accessCode: snap.val() });\r\n                                                                    });\r\n                                                                }\r\n                                                                else\r\n                                                                {\r\n                                                                    firebase.database().ref('/'+snap.val()).once(\"value\", snapshot => {\r\n                                                                        this.setState({ data: snapshot.val(), graph_revision: this.state.graph_revision + 1 });\r\n                                                                        this.refs.canvasComponent.recreateServers();\r\n                                                                    });\r\n                                                                    firebase.database().ref(\"/\"+this.state.curUser.uid).on(\"value\", snap => {\r\n                                                                        this.setState({ accessCode: snap.val() });\r\n                                                                    });\r\n                                                                }\r\n                                                            });\r\n                                                        }).catch(err => {\r\n                                                            \r\n                                                        });\r\n                                                    }}>\r\n                                                    Sign In\r\n                                                </DropdownItem>\r\n                                            );\r\n                                            else \r\n                                                return (\r\n                                                    <>\r\n                                                        <img src={this.state.curUser.photoURL} alt=\"USER\" style={{ \r\n                                                            borderRadius: 100,\r\n                                                            width: 50,\r\n                                                            height: 50,\r\n                                                            display: \"block\",\r\n                                                            margin: \"auto\"\r\n                                                         }} />\r\n                                                        <DropdownItem disabled>\r\n                                                            {this.state.curUser.displayName}\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem disabled>\r\n                                                            {this.state.curUser.email}\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem onClick={() => {\r\n                                                            firebase.auth().signOut();\r\n                                                            this.setState({ curUser: null, authenticated: 0, accessCode: null });\r\n                                                        }}>\r\n                                                            Sign Out\r\n                                                        </DropdownItem>\r\n                                                    </>\r\n                                                );\r\n                                    })()\r\n                                }\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <Toggle name=\"toggle-theme\" checked={this.state.theme === \"light\"} onToggle={(checked, event) => {\r\n                            let layoutCopy = {...this.state.layout};\r\n                            layoutCopy.plot_bgcolor = checked? \"#ffffff\" : \"#222222\";\r\n                            layoutCopy.paper_bgcolor = checked? \"#ffffff\" : \"#222222\";\r\n                            layoutCopy.font.color = checked? \"#000000\" : \"#ffffff\";\r\n                            this.setState({ theme: checked? \"light\" : \"dark\", layout: layoutCopy, graph_revision: this.state.graph_revision + 1 }, () => this.refs.canvasComponent.updateBgColor());\r\n                        }}/>\r\n                    </Nav>\r\n                </Navbar>\r\n                <div\r\n                    style={{\r\n                        width: \"100vw\",\r\n                        height: window.innerHeight - 62,\r\n                        position: \"absolute\",\r\n                        bottom: 0,\r\n                        left: 0\r\n                    }}\r\n                >\r\n                    <div \r\n                        className={`ag-theme-${(this.state.theme === \"dark\")? \"dark\": \"balham\"} ag-grid`}\r\n                        style={{ \r\n                            width: '60vw',\r\n                            position: \"absolute\",\r\n                            bottom: 0,\r\n                            left: 0,\r\n                            top: 0\r\n                        }}\r\n                        >\r\n                        <AgGridReact\r\n                            enableSorting={true}\r\n                            enableFilter={true}\r\n                            rowSelection=\"multiple\"\r\n                            rowDragManaged={true}\r\n                            columnDefs={this.state.columnDefs}\r\n                            rowData={this.state.data}\r\n                            animateRows={true}\r\n                            enableCellChangeFlash={true}\r\n                            getRowNodeId={ data => data.hostname }\r\n                            onGridReady={\r\n                                params => {\r\n                                    this.gridApi = params.api;\r\n                                    this.columnApi = params.columnApi;\r\n                                }\r\n                            }\r\n                            onRowSelected={\r\n                                e => {\r\n                                    let shouldRun = false;\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    for(let d of selectedData)\r\n                                    {\r\n                                        if(d.hostname === e.data.hostname)\r\n                                            shouldRun = true;\r\n                                    }\r\n                                    if(shouldRun)\r\n                                    {\r\n                                        // eslint-disable-next-line\r\n                                        this.refs.canvasComponent.player.x = this.refs.canvasComponent.servers[e.data.hostname].x + this.refs.canvasComponent.servers[e.data.hostname].width/2;\r\n                                        // eslint-disable-next-line\r\n                                        this.refs.canvasComponent.player.y = this.refs.canvasComponent.servers[e.data.hostname].y + this.refs.canvasComponent.servers[e.data.hostname].height/2;\r\n                                        playerX = this.refs.canvasComponent.player.x;\r\n                                        playerY = this.refs.canvasComponent.player.y;\r\n                                        this.setState({ dataIndex: this.getIndexByHostname(e.data.hostname), graph_revision: this.state.graph_revision+1 });\r\n                                    }\r\n                                    else\r\n                                        this.setState({graph_revision: this.state.graph_revision+1});\r\n                                }\r\n                            }\r\n                            onCellEditingStopped={\r\n                                event => {\r\n                                    this.setState({graph_revision:this.state.graph_revision+1});\r\n                                    this.refs.canvasComponent.updateData(event.data);\r\n                                }\r\n                            }\r\n                            >\r\n                        </AgGridReact>\r\n                    </div>\r\n                    <div>\r\n                        <div\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                width:\"40vw\",\r\n                                height: (window.innerHeight - 62) / 2.0,\r\n                                bottom: 0,\r\n                                right: 0,\r\n                            }}\r\n                            className=\"Graph\"\r\n                            >\r\n                            <Plot\r\n                                revision={this.state.graph_revision}\r\n                                data={this.createGraphData((this.gridApi && this.gridApi.getSelectedRows().length > 0)? this.gridApi.getSelectedRows() : this.state.data)}\r\n                                responsive={true}\r\n                                style={{ \r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    bottom: 0,\r\n                                    left: 0,\r\n                                    right: 0,\r\n                                    userSelect: \"none\"\r\n                                }}\r\n                                ref=\"plot\"\r\n                                layout={ this.state.layout }\r\n                                config={{ scrollZoom: true, displaylogo: false }}\r\n                            />\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                width:\"40vw\",\r\n                                height:(window.innerHeight - 62) / 2.0,\r\n                                top: 0,\r\n                                right: 0\r\n                            }}\r\n                            className=\"Canvas\"\r\n                            >\r\n                            <Canvas \r\n                                width={`${0.4*document.documentElement.clientWidth}px`}\r\n                                height={(window.innerHeight - 62) / 2.0}\r\n                                backgroundColor=\"green\"\r\n                                data={this.state.data}\r\n                                ref=\"canvasComponent\"\r\n                                destroyedServer={this.destroyedServer}\r\n                                theme={this.state.theme}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.dataEditorIsOpen}>\r\n                    <ModalHeader>Server Editor</ModalHeader>\r\n                    <Form onSubmit={(e) =>\r\n                    {\r\n                        e.preventDefault();\r\n\r\n                        let hostname = document.getElementById(\"edit_hostname\").value;\r\n                        let area = document.getElementById(\"edit_area\").value;\r\n                        let version = document.getElementById(\"edit_version\").value;\r\n                        let uptime = document.getElementById(\"edit_uptime\").value;\r\n\r\n                        let obj = {\r\n                            hostname: hostname,\r\n                            area: area,\r\n                            version: version,\r\n                            uptime: uptime\r\n                        }\r\n\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        if(this.getIndexByHostname(hostname) >= 0)\r\n                            dataCopy[this.getIndexByHostname(hostname)] = obj;\r\n                        else\r\n                        {\r\n                            dataCopy.push(obj);\r\n                            this.refs.canvasComponent.addServer(obj);\r\n                        }\r\n                        this.setState({ data: dataCopy, dataEditorIsOpen: false });\r\n                        this.gridApi.refreshCells();\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].hostname: \"\"}></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Area</Label>\r\n                                <Input type=\"text\" id=\"edit_area\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].area: \"\"}></Input>                                \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Version</Label>\r\n                                <Input type=\"text\" id=\"edit_version\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].version: \"\"}></Input>                                \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Uptime</Label>\r\n                                <Input type=\"text\" id=\"edit_uptime\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].uptime: \"\"}></Input>                                \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ dataEditorIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"reset\" color=\"dark\" onClick={(e) => {\r\n                                let hostname = document.getElementById(\"edit_hostname\").value;\r\n                                let area = document.getElementById(\"edit_area\").value;\r\n                                let version = document.getElementById(\"edit_version\").value;\r\n                                let uptime = document.getElementById(\"edit_uptime\").value;\r\n                                let arr = [area, version, uptime];\r\n                                let count = 0;\r\n                                for(let a of arr)\r\n                                    if(a)\r\n                                        count++;\r\n                                const saveData = () => {\r\n\r\n                                    hostname = document.getElementById(\"edit_hostname\").value;\r\n                                    area = document.getElementById(\"edit_area\").value;\r\n                                    version = document.getElementById(\"edit_version\").value;\r\n                                    uptime = document.getElementById(\"edit_uptime\").value;\r\n\r\n                                    let obj = {\r\n                                        hostname: hostname,\r\n                                        area: area,\r\n                                        version: version,\r\n                                        uptime: uptime\r\n                                    }\r\n                                    let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                                    if(this.getIndexByHostname(hostname) >= 0)\r\n                                        dataCopy[this.getIndexByHostname(hostname)] = obj;\r\n                                    else\r\n                                    {\r\n                                        dataCopy.push(obj);\r\n                                        this.refs.canvasComponent.addServer(obj);\r\n                                    }\r\n                                    this.setState({ data: dataCopy});\r\n                                    this.gridApi.refreshCells();\r\n                                };\r\n                                saveData();\r\n                                if(count === 2) {\r\n                                    if(this.state.authenticated === 0)\r\n                                        this.setState({ error: \"Sign In To Make Requests to the Server\" });\r\n                                    else if(!area)\r\n                                        axios.get(`http://localhost:4000/${this.state.accessCode}?guess=area&version=${version}&uptime=${uptime}`).then(res => {\r\n                                            let d = (typeof res.data != 'object')? JSON.parse(res.data): res.data;                                            \r\n                                            if(!d.error) {\r\n                                                document.getElementById(\"edit_area\").value = d.prediction;\r\n                                                saveData();\r\n                                            }\r\n                                            else\r\n                                                this.setState({ error: res.data.error });\r\n                                        });\r\n                                    else if(!version)\r\n                                        axios.get(`http://localhost:4000/${this.state.accessCode}?guess=version&area=${area}&uptime=${uptime}`).then(res => {\r\n                                            let d = (typeof res.data != 'object')? JSON.parse(res.data): res.data;                                              \r\n                                            if(!d.error) {\r\n                                                document.getElementById(\"edit_version\").value = d.prediction;\r\n                                                saveData();\r\n                                            }\r\n                                            else\r\n                                                this.setState({ error: res.data.error });\r\n                                        });\r\n                                    else if(!uptime)\r\n                                        axios.get(`http://localhost:4000/${this.state.accessCode}?guess=uptime&area=${area}&version=${version}`).then(res => {\r\n                                            let d = (typeof res.data != 'object')? JSON.parse(res.data): res.data;                                            \r\n                                            if(!d.error) {\r\n                                                document.getElementById(\"edit_uptime\").value = d.prediction;\r\n                                                saveData();\r\n                                            }\r\n                                            else\r\n                                                this.setState({ error: res.data.error });\r\n                                        });\r\n                                } else {\r\n                                    this.setState({ error: \"Leave one and only one field other than the hostname blank for the server to make a prediction\" });\r\n                                }\r\n                            }}>Predict</Button>\r\n                            <Button type=\"submit\" color=\"primary\">Save</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.dataRemoverIsOpen}>\r\n                    <ModalHeader>Delete Server</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        let hostname = document.getElementById(\"edit_hostname\").value;\r\n                        if(this.getIndexByHostname(hostname) >= 0)\r\n                        {\r\n                            dataCopy.splice(this.getIndexByHostname(hostname), 1);\r\n                            this.refs.canvasComponent.deleteServer(hostname);\r\n                        }\r\n                        this.setState({ data: dataCopy, dataRemoverIsOpen: false });\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].hostname: \"\"}></Input>                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ dataRemoverIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"danger\">Delete</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.fieldEditerIsOpen}>\r\n                    <ModalHeader>Field Editor</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        let hostnames = document.getElementById(\"edit_hostname\").value.replace(/ /g, \"\").split(\",\");\r\n                        let key = document.getElementById(\"edit_key\").value.toLowerCase();\r\n                        let value = document.getElementById(\"edit_value\").value;\r\n                        if(key === \"hostname\")\r\n                            this.setState({ error: \"Cannot change hostname\" });\r\n                        else\r\n                            for(let hostname of hostnames)\r\n                            {\r\n                                dataCopy[this.getIndexByHostname(hostname)][key] = value;\r\n                                this.refs.canvasComponent.updateData(dataCopy[this.getIndexByHostname(hostname)]);\r\n                            }\r\n                        this.setState({ data: dataCopy, fieldEditerIsOpen: false, graph_revision: this.state.graph_revision + 1 });\r\n                        this.gridApi.refreshCells();\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(() => {\r\n                                    if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                    {\r\n                                        let arr = [];\r\n                                        for(let obj of this.gridApi.getSelectedRows())\r\n                                        {\r\n                                            arr.push(obj.hostname);\r\n                                        }\r\n                                        return arr.join(\", \");\r\n                                    }\r\n                                    return \"\";\r\n                                })()}></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Field Name</Label>\r\n                                <Input type=\"text\" id=\"edit_key\"></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Value</Label>\r\n                                <Input type=\"text\" id=\"edit_value\"></Input>                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ fieldEditerIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"dark\">Edit</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.fieldRemoverIsOpen}>\r\n                    <ModalHeader>Field Remover</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        let hostnames = document.getElementById(\"edit_hostname\").value.replace(/ /g, \"\").split(\",\");\r\n                        let key = document.getElementById(\"edit_key\").value.toLowerCase();\r\n                        if(key === \"hostname\")\r\n                            this.setState({ error: \"Cannot change hostname\" });\r\n                        else\r\n                            for(let hostname of hostnames)\r\n                            {\r\n                                dataCopy[this.getIndexByHostname(hostname)][key] = \"\";\r\n                                this.refs.canvasComponent.updateData(dataCopy[this.getIndexByHostname(hostname)]);\r\n                            }\r\n                        this.setState({ data: dataCopy, fieldRemoverIsOpen: false, graph_revision: this.state.graph_revision + 1 });\r\n                        this.gridApi.refreshCells();\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(() => {\r\n                                    if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                    {\r\n                                        let arr = [];\r\n                                        for(let obj of this.gridApi.getSelectedRows())\r\n                                        {\r\n                                            arr.push(obj.hostname);\r\n                                        }\r\n                                        return arr.join(\", \");\r\n                                    }\r\n                                    return \"\";\r\n                                })()}></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Field Name</Label>\r\n                                <Input type=\"text\" id=\"edit_key\"></Input>                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ fieldRemoverIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"danger\">Remove</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.selectorIsOpen}>\r\n                    <ModalHeader>Selector</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        this.gridApi.deselectAll();\r\n                        if(this.state.selectorTab === \"hostname\")\r\n                        {\r\n                            let hostnames = document.getElementById(\"edit_hostname\").value.replace(/ /g, \"\").split(\",\");\r\n                            this.gridApi.forEachNode(\r\n                                node => {\r\n                                    if(hostnames.includes(node.data.hostname))\r\n                                    {\r\n                                        node.setSelected(true);\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                        else\r\n                        {\r\n                            let expression = document.getElementById(\"edit_expression\").value;\r\n                            try {\r\n                                this.gridApi.forEachNode(\r\n                                    node => {\r\n                                        let replacedExpression = expression.replace(/{hostname}/g, '\"'+node.data.hostname+'\"').replace(/{area}/g, '\"'+node.data.area+'\"').replace(/{version}/g, node.data.version).replace(/{uptime}/g, '\"'+node.data.uptime+'\"');\r\n                                        // eslint-disable-next-line\r\n                                        if(eval(replacedExpression))\r\n                                        {\r\n                                            node.setSelected(true);\r\n                                        }\r\n                                    }    \r\n                                );\r\n                            }\r\n                            catch(e) {\r\n                                this.setState({ error: \"Error in Boolean Expression: \"+e.message });\r\n                            }\r\n                            this.setState({cachedExpression: expression});\r\n                        }\r\n                        this.setState({ selectorIsOpen: false });\r\n                    }}>\r\n                        <ModalBody>\r\n                            <Nav tabs>\r\n                                <NavItem>\r\n                                    <NavLink onClick={() => { this.setState({ selectorTab: \"hostname\" }) }}>By Hostname</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink onClick={() => { this.setState({ selectorTab: \"expression\" }) }}>By Expression</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={this.state.selectorTab}>\r\n                                <TabPane tabId=\"hostname\">\r\n                                    <FormGroup>\r\n                                        <Label>Hostname</Label>\r\n                                        <Input type=\"text\" id=\"edit_hostname\" defaultValue={(() => {\r\n                                            if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                            {\r\n                                                let arr = [];\r\n                                                for(let obj of this.gridApi.getSelectedRows())\r\n                                                {\r\n                                                    arr.push(obj.hostname);\r\n                                                }\r\n                                                return arr.join(\", \");\r\n                                            }\r\n                                            return \"\";\r\n                                        })()}></Input>                   \r\n                                    </FormGroup>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"expression\">\r\n                                    <FormGroup>\r\n                                        <Label>Expression</Label>\r\n                                        <FormText>Put a boolean here that will be evaluated to determine which nodes to select. Use variables like {\"{\"}hostname{\"}\"}, {\"{\"}area{\"}\"}, {\"{\"}version{\"}\"}, and {\"{\"}uptime{\"}\"} to access the respective values.<br /><span style={{color: \"red\", fontWeight: \"bold\", fontStyle: \"underline\"}}>WARNING</span>: Selecting too many items may cause the page to lag or crash <br /> Examples: <br />{\"{\"}area{\"}\"} == '1' <br /> {\"{\"}uptime{\"} <\"} 10</FormText>\r\n                                        <Input type=\"text\" id=\"edit_expression\" defaultValue={(() => {\r\n                                            if(this.state.cachedExpression)\r\n                                            {\r\n                                                return this.state.cachedExpression;\r\n                                            }\r\n                                            if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                            {\r\n                                                let arr = [];\r\n                                                for(let obj of this.gridApi.getSelectedRows())\r\n                                                {\r\n                                                    arr.push(obj.hostname);\r\n                                                }\r\n                                                return \"['\"+arr.join(\"', '\")+\"'].includes({hostname})\";\r\n                                            }\r\n                                            return \"\";\r\n                                        })()}></Input>                   \r\n                                    </FormGroup>\r\n                                </TabPane>\r\n                            </TabContent>\r\n                            \r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ selectorIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"primary\">Select</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.joinCodeIsOpen}>\r\n                    <ModalHeader>Join Code</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        if(this.state.authenticated === 1)\r\n                        {\r\n                            let code = document.getElementById(\"edit_code\").value;\r\n                            firebase.database().ref(\"/\"+this.state.curUser.uid).set(code);\r\n                            this.setState({ joinCodeIsOpen: false });\r\n                            firebase.database().ref(\"/\"+this.state.curUser.uid).once(\"value\", snap => {\r\n                                firebase.database().ref('/'+snap.val()).once(\"value\", snapshot => {\r\n                                    this.setState({ data: snapshot.val(), graph_revision: this.state.graph_revision + 1 });\r\n                                    this.refs.canvasComponent.recreateServers();\r\n                                });\r\n                            });\r\n                        }\r\n                        else\r\n                            this.setState({ error: \"Sign In To Join\" });\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Code</Label>\r\n                                <FormText>Enter the code from another account (find the code in Share > Share) or create a new code to start a new data room</FormText>\r\n                                <Input type=\"text\" id=\"edit_code\" />                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ joinCodeIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"primary\">Join</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.shareCodeIsOpen}>\r\n                    <ModalHeader>Share Code</ModalHeader>\r\n                    <ModalBody>\r\n                        <FormText>Share this code to anyone who wants to share and edit the same data as you. </FormText>\r\n                        {(() => {\r\n                            if(this.state.authenticated === 1)\r\n                                return this.state.accessCode;\r\n                            else \r\n                                return \"Please Sign In To Share\";\r\n                        })()}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\" onClick={(e) => { this.setState({ shareCodeIsOpen: false }); }}>Ok</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.dataFileEditorIsOpen}>\r\n                    <ModalHeader>Edit File</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        try {\r\n                            let newData = JSON.parse(document.getElementById(\"edit_data\").value);\r\n\r\n                            for(let i in newData)\r\n                            {\r\n                                newData[i].uptime = (newData[i].uptime && !isNaN(parseInt(newData[i].uptime)))? parseInt(newData[i].uptime) : 0;\r\n                            }\r\n                            \r\n                            this.setState({ data: newData, dataFileEditorIsOpen: false });\r\n                        } catch(e) {\r\n                            this.setState({ error: `Error in saving data: `+e.message});\r\n                        }\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Data</Label>\r\n                                <Input type=\"textarea\" id=\"edit_data\" rows=\"10\" defaultValue={JSON.stringify(this.state.data, null, (this.state.beautify)? 4: 0)}/>\r\n                                <Toggle name=\"toggle-minify\" label=\"Minify\" labelRight=\"Beautify\" style={{float:\"right\"}} checked={this.state.beautify} onToggle={(checked, event) => { \r\n                                    try {\r\n                                        document.getElementById('edit_data').value = JSON.stringify(JSON.parse(document.getElementById('edit_data').value), null, (checked)? 4: 0);                             \r\n                                        this.setState({beautify: checked}); \r\n                                    } catch(e) {\r\n                                        this.setState({ error: `Error in ${checked? 'beatifying': 'minifying'} data: `+e.message});\r\n                                    }\r\n                                }}/>\r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ dataFileEditorIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"reset\" color=\"secondary\" onClick={e => {\r\n                                document.getElementById('edit_data').value = JSON.stringify(this.state.data, null, (this.state.beautify)? 4: 0);\r\n                            }}>Reset</Button>\r\n                            <Button type=\"submit\" color=\"primary\">Save</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n                \r\n                <Modal size=\"lg\" isOpen={!!this.state.error}>\r\n                    <ModalHeader style={{ color: \"red\" }}>Error</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.state.error}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"secondary\" onClick={(e) => { this.setState({ error: null }); }}>Close</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.bestViewerIsOpen}>\r\n                    <ModalHeader>Performance</ModalHeader>\r\n                    <ModalBody>\r\n                        <FormText>Enter in an attribute and get the best performing values for that attribute</FormText>\r\n                        <Input type=\"text\" id=\"input-text\" />\r\n                        <Table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Value</th>\r\n                                    <th>Count</th>\r\n                                    <th>Average Uptime</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody id=\"tbody\">\r\n                                {this.state.rows}\r\n                            </tbody>\r\n                        </Table>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={(e) => { this.setState({ bestViewerIsOpen: false }); }}>Close</Button>\r\n                        <Button color=\"primary\" onClick={(e) => {\r\n                                    let rows = [];\r\n                                    if(this.state.authenticated === 0)\r\n                                        this.setState({ error: \"Sign In To Make Requests to the Server\" });\r\n                                    else\r\n                                        axios.get(`http://localhost:4000/${this.state.accessCode}?best=${document.getElementById(\"input-text\").value.toLowerCase()}`).then(res => {\r\n                                            let d = (typeof res.data === 'object')? res.data: JSON.parse(res.data);\r\n                                            if(!d.error) {\r\n                                                for(let i = 0; i < d.best.length; i++)\r\n                                                    rows.push(<tr key={i+1}>\r\n                                                        <th scope=\"row\">{i+1}</th>\r\n                                                        <td>{d.best[i][0]}</td>\r\n                                                        <td>{d.best[i][1]}</td>\r\n                                                        <td>{d.best[i][2]}</td>\r\n                                                    </tr>);\r\n                                            }\r\n                                            else\r\n                                                this.setState({ error: d.error });\r\n                                            this.setState({ rows: rows })\r\n                                        });\r\n                                }}>Load</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                \r\n\r\n            </>\r\n        ) : (\r\n            <div \r\n                    className=\"ag-theme-dark ag-grid\"\r\n                    style={{ \r\n                        height: '100vh', \r\n                        width: '100vw' \r\n                    }}\r\n                    >\r\n                    <AgGridReact\r\n                        enableSorting={true}\r\n                        enableFilter={true}\r\n                        rowSelection=\"multiple\"\r\n                        rowDragManaged={true}\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.data}\r\n                        onGridReady={\r\n                            params => {\r\n                                this.gridApi = params.api;\r\n                                this.columnApi = params.columnApi;\r\n                            }\r\n                        }>\r\n                    </AgGridReact>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import './bootstrap/bootstrap.min.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}